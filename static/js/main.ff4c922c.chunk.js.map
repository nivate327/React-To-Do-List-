{"version":3,"sources":["components/img/pinknote.png","components/ToDo.jsx","App.js","reportWebVitals.js","index.js"],"names":["ToDo","useState","task","setTask","toggle","setToggle","editItem","setEdit","localStorage","getItem","JSON","parse","items","setItem","useEffect","stringify","addItems","alert","old","taskall","id","Date","getTime","toString","name","map","elem","className","src","img","alt","type","placeholder","onChange","e","target","value","onClick","newItem","find","Edit","update","filter","Delete","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAAe,G,MAAA,IAA0B,sC,OC+H1BA,MA3Hf,WAEI,MAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,oBAAS,GAAnC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,MAAnC,mBAAOK,EAAP,KAAiBC,EAAjB,KAaA,EAAyBN,mBAVVO,aAAaC,QAAQ,SAGrBC,KAAKC,MAAMH,aAAaC,QAAQ,UAGhC,IAIf,mBAAOG,EAAP,KAAcC,EAAd,KAGAC,qBAAU,WACNN,aAAaK,QAAQ,QAASH,KAAKK,UAAUH,MAC9C,CAACA,IAEJ,IAIMI,EAAW,WACA,KAATd,EACAe,MAAM,yBAEM,IAARf,GAAeE,GAmBnBS,GAAQ,SAACK,GACL,IAAMC,EAAU,CAAEC,IAAI,IAAIC,MAAOC,UAAUC,WAAYC,KAAMtB,GAC7D,MAAM,GAAN,mBAAWgB,GAAX,CAAgBC,OAGpBhB,EAAQ,MAtBRU,EACID,EAAMa,KAAI,SAACC,GAEP,OAAGA,EAAKN,KAAKd,EAEF,2BAAIoB,GAAX,IAAiBF,KAAMtB,IAGpBwB,MAIfrB,GAAU,GACVF,EAAQ,IACRI,EAAQ,QAsChB,OACI,qBAAKoB,UAAU,OAAf,SACI,sBAAKA,UAAU,SAAf,UACI,qBAAKA,UAAU,MAAf,SACI,qBAAKC,IAAKC,EAAKC,IAAI,eAEvB,mBAAGV,GAAG,OAAN,wCACA,sBAAKO,UAAU,YAAf,UACI,uBAAOI,KAAK,OAAOX,GAAG,QAAQY,YAAY,4BAAkBC,SAtEzD,SAACC,GAChB/B,EAAQ+B,EAAEC,OAAOC,QAqE6EA,MAAOlC,IAE1FE,EAAU,mBAAGuB,UAAU,sBAAsBU,QAASrB,IACvD,mBAAGW,UAAU,sBAAsBU,QAASrB,OAG9C,qBAAKW,UAAU,UAAf,SACKf,EAAMa,KAAI,SAACC,GACR,OACI,sBAAKC,UAAU,MAAf,UACI,4BAAID,EAAKF,OACT,gCACI,mBAAGG,UAAU,mBAAmBU,QAAS,kBA9C9D,SAACjB,GAER,IAAIkB,EAAQ1B,EAAM2B,MAAK,SAACb,GAEpB,OAAOA,EAAKN,IAAIA,KAGpBf,GAAU,GACVF,EAAQmC,EAAQd,MAChBjB,EAAQa,GAqCmEoB,CAAKd,EAAKN,OACzD,mBAAGO,UAAU,eAAeU,QAAS,kBAnCtD,SAACjB,GAEZ,IAAIqB,EAAS7B,EAAM8B,QAAO,SAAChB,GACvB,OAAOA,EAAKN,KAAOA,KAGvBP,EAAQ4B,GA6B+DE,CAAOjB,EAAKN,YAJrCM,EAAKN,SAW3C,qBAAKO,UAAU,YAAf,SACI,wBAAQA,UAAU,SAASU,QAlCzB,WACdxB,EAAQ,KAiCI,+BC9GL+B,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ff4c922c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pinknote.2550c987.png\";","import React, { useState, useEffect } from 'react';\r\nimport \"./css/style.css\";\r\nimport img from \"./img/pinknote.png\";\r\n\r\nfunction ToDo() {\r\n\r\n    const [task, setTask] = useState();\r\n    const [toggle, setToggle]=useState(true);\r\n    const [editItem, setEdit]=useState(null);\r\n\r\n    const getItem = () => {\r\n        let list = localStorage.getItem(\"lists\");\r\n\r\n        if (list) {\r\n            return JSON.parse(localStorage.getItem(\"lists\"));\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    const [items, setItem] = useState(getItem());\r\n\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"lists\", JSON.stringify(items))\r\n    }, [items]);\r\n\r\n    const InputEvent = (e) => {\r\n        setTask(e.target.value);\r\n    }\r\n\r\n    const addItems = () => {\r\n        if (task === \"\") {\r\n            alert(\"Task Field is Empty !\");\r\n        }\r\n        else if(task != \"\" && !toggle)\r\n        {\r\n            setItem(\r\n                items.map((elem)=>\r\n                {\r\n                    if(elem.id===editItem)\r\n                    {\r\n                        return {...elem, name: task}\r\n                    }\r\n\r\n                    return elem;\r\n                })\r\n            )\r\n\r\n            setToggle(true);\r\n            setTask(\"\")\r\n            setEdit(null)\r\n        }\r\n        else {\r\n            setItem((old) => {\r\n                const taskall = { id: new Date().getTime().toString(), name: task };\r\n                return [...old, taskall];\r\n            })\r\n\r\n            setTask(\"\");\r\n        }\r\n    }\r\n\r\n    const Edit=(id)=>\r\n    {\r\n        let newItem=items.find((elem)=>\r\n        {\r\n            return elem.id==id;\r\n        })\r\n\r\n        setToggle(false);\r\n        setTask(newItem.name)\r\n        setEdit(id)\r\n    }\r\n\r\n    const Delete = (id) => {\r\n\r\n        let update = items.filter((elem) => {\r\n            return elem.id !== id;\r\n        });\r\n\r\n        setItem(update);\r\n    }\r\n\r\n    const clearData = () => {\r\n        setItem([]);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"center\">\r\n                <div className=\"img\">\r\n                    <img src={img} alt=\"no-found\" />\r\n                </div>\r\n                <p id=\"head\">Add List Here 🖕</p>\r\n                <div className=\"enterlist\">\r\n                    <input type=\"text\" id=\"enter\" placeholder=\"Enter Task   ✍️\" onChange={InputEvent} value={task} />\r\n                  \r\n                  {toggle ?  <i className=\"fas fa-plus addItem\" onClick={addItems}></i> : \r\n                  <i className=\"fas fa-edit addItem\" onClick={addItems}></i> }\r\n                </div>\r\n\r\n                <div className=\"alltask\">\r\n                    {items.map((elem) => {\r\n                        return (\r\n                            <div className=\"new\" key={elem.id}>\r\n                                <p>{elem.name}</p>\r\n                                <div>\r\n                                    <i className=\"fas fa-edit edit\" onClick={() => Edit(elem.id)}></i>\r\n                                    <i className=\"fas fa-trash\" onClick={() => Delete(elem.id)}></i>\r\n                                </div>\r\n                            </div>);\r\n                    })}\r\n\r\n                </div>\r\n\r\n                <div className=\"removeall\">\r\n                    <button className=\"remove\" onClick={clearData}>Clear All</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default ToDo;\r\n","import React from \"react\";\nimport ToDo from \"./components/ToDo\";\n\nfunction App() {\n  return (\n    <ToDo/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}